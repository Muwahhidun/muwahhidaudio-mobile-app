"""Add email verification fields to User and create SystemSettings table

Revision ID: 76dc0ff5f204
Revises: ac13b696246d
Create Date: 2025-10-26 09:39:28.598228

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '76dc0ff5f204'
down_revision: Union[str, None] = 'ac13b696246d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('system_settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(length=100), nullable=False),
    sa.Column('value', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_encrypted', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_system_settings_category'), 'system_settings', ['category'], unique=False)
    op.create_index(op.f('ix_system_settings_id'), 'system_settings', ['id'], unique=False)
    op.create_index(op.f('ix_system_settings_key'), 'system_settings', ['key'], unique=True)

    # Insert default SMTP settings
    op.execute("""
        INSERT INTO system_settings (key, value, category, description, is_encrypted, created_at, updated_at)
        VALUES
            ('smtp_host', 'smtp.mail.ru', 'smtp', 'SMTP server hostname', false, NOW(), NOW()),
            ('smtp_port', '465', 'smtp', 'SMTP server port', false, NOW(), NOW()),
            ('smtp_username', 'x@muwahhid.ru', 'smtp', 'SMTP username/email', false, NOW(), NOW()),
            ('smtp_password', 'tv4RAYKDrZFtgmMEd5oS', 'smtp', 'SMTP password (encrypted)', true, NOW(), NOW()),
            ('smtp_use_ssl', 'true', 'smtp', 'Use SSL for SMTP connection', false, NOW(), NOW()),
            ('email_from_name', 'Muwahhid', 'email', 'Display name for sender', false, NOW(), NOW()),
            ('email_from_address', 'x@muwahhid.ru', 'email', 'Email address for sender', false, NOW(), NOW()),
            ('frontend_url', 'http://localhost:3065', 'email', 'Frontend URL for email links', false, NOW(), NOW()),
            ('verification_subject', 'Подтвердите регистрацию', 'email', 'Subject for verification emails', false, NOW(), NOW())
    """)

    op.drop_index('ix_book_authors_name_lower_unique', table_name='book_authors')
    op.create_unique_constraint(None, 'book_authors', ['name'])
    op.drop_index('ix_books_name_author_lower_unique', table_name='books')
    op.create_unique_constraint('unique_book_per_author', 'books', ['name', 'author_id'])
    op.drop_index('ix_lesson_teachers_name_lower_unique', table_name='lesson_teachers')
    op.create_unique_constraint(None, 'lesson_teachers', ['name'])
    op.drop_constraint('unique_test_per_series', 'tests', type_='unique')
    op.drop_index('ix_themes_name_lower_unique', table_name='themes')
    op.create_unique_constraint(None, 'themes', ['name'])

    # Add new columns to users table (nullable first for existing users)
    op.add_column('users', sa.Column('username', sa.String(length=50), nullable=True))
    op.add_column('users', sa.Column('email_verified', sa.Boolean(), server_default='false', nullable=False))
    op.add_column('users', sa.Column('verification_token', sa.String(length=255), nullable=True))
    op.add_column('users', sa.Column('verification_token_expires', sa.DateTime(), nullable=True))

    # Generate username from email for existing users
    # Extract part before @ and handle duplicates by appending numbers
    op.execute("""
        WITH numbered_users AS (
            SELECT
                id,
                email,
                SPLIT_PART(email, '@', 1) as base_username,
                ROW_NUMBER() OVER (PARTITION BY SPLIT_PART(email, '@', 1) ORDER BY id) - 1 as dup_num
            FROM users
            WHERE username IS NULL
        )
        UPDATE users
        SET username = CASE
            WHEN nu.dup_num = 0 THEN nu.base_username
            ELSE nu.base_username || nu.dup_num::text
        END
        FROM numbered_users nu
        WHERE users.id = nu.id
    """)

    # Set email_verified = true for existing users
    op.execute("""
        UPDATE users
        SET email_verified = true
        WHERE email_verified = false AND username IS NOT NULL
    """)

    # Now make username NOT NULL
    op.alter_column('users', 'username', nullable=False)

    # Create unique index on username
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_column('users', 'verification_token_expires')
    op.drop_column('users', 'verification_token')
    op.drop_column('users', 'email_verified')
    op.drop_column('users', 'username')
    op.drop_constraint(None, 'themes', type_='unique')
    op.create_index('ix_themes_name_lower_unique', 'themes', [sa.text('lower(name::text)')], unique=False)
    op.create_unique_constraint('unique_test_per_series', 'tests', ['series_id'])
    op.drop_constraint(None, 'lesson_teachers', type_='unique')
    op.create_index('ix_lesson_teachers_name_lower_unique', 'lesson_teachers', [sa.text('lower(name::text)')], unique=False)
    op.drop_constraint('unique_book_per_author', 'books', type_='unique')
    op.create_index('ix_books_name_author_lower_unique', 'books', [sa.text('lower(name::text)'), 'author_id'], unique=False)
    op.drop_constraint(None, 'book_authors', type_='unique')
    op.create_index('ix_book_authors_name_lower_unique', 'book_authors', [sa.text('lower(name::text)')], unique=False)
    op.drop_index(op.f('ix_system_settings_key'), table_name='system_settings')
    op.drop_index(op.f('ix_system_settings_id'), table_name='system_settings')
    op.drop_index(op.f('ix_system_settings_category'), table_name='system_settings')
    op.drop_table('system_settings')
    # ### end Alembic commands ###
